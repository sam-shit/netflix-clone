{"version":3,"sources":["axios.js","requests.js","Row.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","UrlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cebeae5a.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"http://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","const API_KEY = \"fa7d7579c36c152e05c6aaf7b69f12e3\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n  fetchTopRated: `/movie/top-rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genre=35`,\r\n  fetchHorrorMovies: `/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genre=10749`,\r\n  fetchDocumentaries: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst baseURL = \"http://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return requests;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          const UrlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(UrlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            onClick={() => handleClick(movie)}\r\n            key={movie.id}\r\n            className={`row__poster ${isLargeRow && \"row_posterLarge\"}`}\r\n            src={`${baseURL}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <header\r\n        className=\"banner\"\r\n        style={{\r\n          backgroundSize: \"cover\",\r\n          backgroundImage: `url(\r\n                  \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n\r\n              )`,\r\n          backgroundPosition: \"center center\",\r\n        }}\r\n      >\r\n        <div className=\"banner__contents\">\r\n          <h1 className=\"banner__title\">\r\n            {movie?.title || movie?.name || movie?.original_name}\r\n          </h1>\r\n\r\n          <div className=\"banner__buttons\">\r\n            <button className=\"banner__button \">Play</button>\r\n            <button className=\"banner__button \">My List</button>\r\n          </div>\r\n\r\n          <h1 className=\"banner__description\">\r\n            {truncate(movie?.overview, 150)}\r\n          </h1>\r\n        </div>\r\n\r\n        <div className=\"banner--fadeBottom\" />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else handleShow(false);\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <div className={`nav ${show && \"nav__black\"}`}>\r\n        <img\r\n          className=\"nav__logo\"\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n          alt=\"Netflix Logo\"\r\n        />\r\n\r\n        <img\r\n          className=\"nav__avatar\"\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n          alt=\"Avtar\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}